pkg_name=parmetis
pkg_version=4.0.3
pkg_moduledir="${pkg_name}/${pkg_version}"
pkg_description="Parallel Graph Partitioning and Fill-reducing Matrix Ordering"
pkg_url="http://glaros.dtc.umn.edu/gkhome/metis/parmetis/overview"
src_url="http://glaros.dtc.umn.edu/gkhome/fetch/sw/parmetis/${pkg_name}-${pkg_version}.tar.gz"
src_dir="${pkg_name}-${pkg_version}"

function build()
{
    . ../../../common/module.sh

    # Parse program options
    module_build_parse_command_line_args \
	"${0}" \
	"${pkg_name}" \
	"${pkg_version}" \
	"${pkg_moduledir}" \
	"${pkg_description}" \
	"${pkg_url}" \
	"$@"

    # Load build-time dependencies and determine prerequisite modules
    module_load_build_deps build_deps
    pkg_prereqs=$(module_prereqs prereqs)

    # Download and unpack source
    pkg_prefix=$(module_build_prefix "${prefix}" "${pkg_moduledir}")
    pkg_build_dir=$(module_build_create_build_dir "${pkg_name}" "${pkg_version}")
    pkg_src="${pkg_build_dir}/$(basename ${src_url})"
    module_build_download_package "${src_url}" "${pkg_src}"
    module_build_unpack "${pkg_src}" "${pkg_build_dir}"

    # Build
    pushd "${pkg_build_dir}/${src_dir}"

    make config shared=1 prefix="${pkg_prefix}"
    make
    make install

    # Workaround for an issue that causes metis.h to not be installed
    # (see http://glaros.dtc.umn.edu/gkhome/node/832).
    metis_h_src="${pkg_build_dir}/${src_dir}/build/Linux-$(uname -m)/metis/include/metis.h"
    metis_h_dstdir="${DESTDIR}${pkg_prefix}/include"
    echo "Copying ${metis_h_src} to ${metis_h_dstdir}"
    cp "${metis_h_src}" "${metis_h_dstdir}"

    popd

    # Write the module file
    pkg_modulefile=$(module_build_modulefile "${prefix}" "${modulefilesdir}" "${pkg_moduledir}")
    cat >"${pkg_modulefile}" <<EOF
#%Module
# ${pkg_name} ${pkg_version}

proc ModulesHelp { } {
     puts stderr "\tSets up the environment for ${pkg_name} ${pkg_version}\n"
}

module-whatis "${pkg_description}"
module-whatis "${pkg_url}"

${pkg_prereqs}

setenv ${pkg_name^^}_ROOT ${pkg_prefix}
setenv ${pkg_name^^}_INCDIR ${pkg_prefix}/include
setenv ${pkg_name^^}_INCLUDEDIR ${pkg_prefix}/include
setenv ${pkg_name^^}_LIBDIR ${pkg_prefix}/lib
setenv ${pkg_name^^}_LIBRARYDIR ${pkg_prefix}/lib
prepend-path PATH ${pkg_prefix}/bin
prepend-path C_INCLUDE_PATH ${pkg_prefix}/include
prepend-path CPLUS_INCLUDE_PATH ${pkg_prefix}/include
prepend-path LIBRARY_PATH ${pkg_prefix}/lib
prepend-path LD_LIBRARY_PATH ${pkg_prefix}/lib
set MSG "${pkg_name} ${pkg_version}"
EOF

    module_build_cleanup "${pkg_build_dir}"
}

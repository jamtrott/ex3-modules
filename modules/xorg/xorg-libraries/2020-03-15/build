pkg_name=xorg-libraries
pkg_version=2020-03-15
pkg_moduledir="xorg/${pkg_name}/${pkg_version}"
pkg_description="X Window System libraries"
pkg_url="http://x.org/"
pkg_name_env_var=$(echo "${pkg_name}" | tr '[:lower:]' '[:upper:]' | tr -c '[:alnum:]\n' '_')

function build()
{
    . ../../../../common/module.sh

    # Parse program options
    module_build_parse_command_line_args \
	"${0}" \
	"${pkg_name}" \
	"${pkg_version}" \
	"${pkg_moduledir}" \
	"${pkg_description}" \
	"${pkg_url}" \
	"$@"

    # Load build-time dependencies and determine prerequisite modules
    module_load_build_deps build_deps
    pkg_prereqs=$(module_prereqs prereqs)

    # Set up build and install directories
    pkg_prefix=$(module_build_prefix "${prefix}" "${pkg_moduledir}")
    pkg_build_dir=$(module_build_create_build_dir "${pkg_name}" "${pkg_version}")

    # Set up the list of libraries to install
    cat > "${pkg_build_dir}/xorg-libraries.md5" << "EOF"
ce2fb8100c6647ee81451ebe388b17ad  xtrans-1.4.0.tar.bz2
55adbfb6d4370ecac5e70598c4e7eed2  libX11-1.6.9.tar.bz2
f5b48bb76ba327cd2a8dc7a383532a95  libXext-1.3.4.tar.bz2
4e1196275aa743d6ebd3d3d5ec1dff9c  libFS-1.0.8.tar.bz2
76d77499ee7120a56566891ca2c0dbcf  libICE-1.0.10.tar.bz2
87c7fad1c1813517979184c8ccd76628  libSM-1.2.3.tar.bz2
eeea9d5af3e6c143d0ea1721d27a5e49  libXScrnSaver-1.2.3.tar.bz2
a9019421d3ee8b4937b6afd9025f018a  libXt-1.2.0.tar.bz2
ac774cff8b493f566088a255dbf91201  libXmu-1.1.3.tar.bz2
6f0ecf8d103d528cfc803aa475137afa  libXpm-3.5.13.tar.bz2
e5e06eb14a608b58746bdd1c0bd7b8e3  libXaw-1.0.13.tar.bz2
07e01e046a0215574f36a3aacb148be0  libXfixes-5.0.3.tar.bz2
3fa0841ea89024719b20cd702a9b54e0  libXcomposite-0.4.5.tar.bz2
802179a76bded0b658f4e9ec5e1830a4  libXrender-0.9.10.tar.bz2
9b9be0e289130fb820aedf67705fc549  libXcursor-1.2.0.tar.bz2
e3f554267a7a04b042dc1f6352bd6d99  libXdamage-1.1.5.tar.bz2
6447db6a689fb530c218f0f8328c3abc  libfontenc-1.1.4.tar.bz2
00516bed7ec1453d56974560379fff2f  libXfont2-2.0.4.tar.bz2
4a433c24627b4ff60a4dd403a0990796  libXft-2.3.3.tar.bz2
62c4af0839072024b4b1c8cbe84216c7  libXi-1.7.10.tar.bz2
0d5f826a197dae74da67af4a9ef35885  libXinerama-1.1.4.tar.bz2
18f3b20d522f45e4dadd34afb5bea048  libXrandr-1.5.2.tar.bz2
5d6d443d1abc8e1f6fc1c57fb27729bb  libXres-1.2.0.tar.bz2
ef8c2c1d16a00bd95b9fdcef63b8a2ca  libXtst-1.2.3.tar.bz2
210b6ef30dda2256d54763136faa37b9  libXv-1.0.11.tar.bz2
3569ff7f3e26864d986d6a21147eaa58  libXvMC-1.0.12.tar.bz2
0ddeafc13b33086357cfa96fae41ee8e  libXxf86dga-1.1.5.tar.bz2
298b8fff82df17304dfdb5fe4066fe3a  libXxf86vm-1.1.4.tar.bz2
d2f1f0ec68ac3932dd7f1d9aa0a7a11c  libdmx-1.1.4.tar.bz2
b34e2cbdd6aa8f9cc3fa613fd401a6d6  libpciaccess-0.16.tar.bz2
dd7e1e946def674e78c0efbc5c7d5b3b  libxkbfile-1.1.0.tar.bz2
42dda8016943dc12aff2c03a036e0937  libxshmfence-1.3.tar.bz2
EOF

    C_INCLUDE_PATH="${pkg_prefix}/include:${C_INCLUDE_PATH}"
    CPLUS_INCLUDE_PATH="${pkg_prefix}/include:${CPLUS_INCLUDE_PATH}"
    LIBRARY_PATH="${pkg_prefix}/lib:${LIBRARY_PATH}"
    LD_LIBRARY_PATH="${pkg_prefix}/lib:${LD_LIBRARY_PATH}"
    PKG_CONFIG_PATH="${pkg_prefix}/lib/pkgconfig:${pkg_prefix}/share/pkgconfig:${PKG_CONFIG_PATH}"

    for package in $(grep -v '^#' "${pkg_build_dir}/xorg-libraries.md5" | awk '{print $2}'); do
	# Download and unpack source
	src_url="https://x.org/pub/individual/lib/${package}"
	src_dir="${package%.tar.bz2}"
	pkg_src="${pkg_build_dir}/$(basename ${src_url})"
	module_build_download_package "${src_url}" "${pkg_src}"
	module_build_unpack "${pkg_src}" "${pkg_build_dir}" -xj

	# Build
	pushd "${pkg_build_dir}/${src_dir}"
	case $src_dir in
	    libICE*)
		./configure --prefix="${pkg_prefix}" \
			    ICE_LIBS=-lpthread;;
	    libSM*)
		./configure --prefix="${pkg_prefix}" \
			    LIBUUID_CFLAGS="-I${UTIL_LINUX_INCLUDEDIR}";;
	    libXfont2-[0-9]*)
		./configure --prefix="${pkg_prefix}" \
			    --disable-devel-docs;;
	    libXt-[0-9]*)
		./configure --prefix="${pkg_prefix}" \
			    --with-appdefaultdir="${pkg_prefix}/etc/X11/app-defaults";;
	    *)
		./configure --prefix="${pkg_prefix}";;
	esac
	make -j"${JOBS}"
	make install
	popd
    done

    # Write the module file
    pkg_modulefile=$(module_build_modulefile "${prefix}" "${modulefilesdir}" "${pkg_moduledir}")
    cat >"${pkg_modulefile}" <<EOF
#%Module
# ${pkg_name} ${pkg_version}

proc ModulesHelp { } {
     puts stderr "\tSets up the environment for ${pkg_name} ${pkg_version}\n"
}

module-whatis "${pkg_description}"
module-whatis "${pkg_url}"

${pkg_prereqs}

setenv ${pkg_name_env_var}_ROOT ${pkg_prefix}
setenv ${pkg_name_env_var}_INCDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_INCLUDEDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_LIBDIR ${pkg_prefix}/lib
setenv ${pkg_name_env_var}_LIBRARYDIR ${pkg_prefix}/lib
prepend-path PATH ${pkg_prefix}/bin
prepend-path C_INCLUDE_PATH ${pkg_prefix}/include
prepend-path CPLUS_INCLUDE_PATH ${pkg_prefix}/include
prepend-path LIBRARY_PATH ${pkg_prefix}/lib
prepend-path LD_LIBRARY_PATH ${pkg_prefix}/lib
prepend-path PKG_CONFIG_PATH ${pkg_prefix}/lib/pkgconfig
prepend-path PKG_CONFIG_PATH ${pkg_prefix}/share/pkgconfig
prepend-path ACLOCAL_PATH ${pkg_prefix}/share/aclocal
prepend-path MANPATH ${pkg_prefix}/share/man
set MSG "${pkg_name} ${pkg_version}"
EOF

    module_build_cleanup "${pkg_build_dir}"
}

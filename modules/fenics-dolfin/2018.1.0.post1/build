pkg_name=fenics-dolfin
pkg_version=2018.1.0.post1
pkg_moduledir="${pkg_name}/${pkg_version}"
pkg_description="C++ interface to the FEniCS computing platform for solving partial differential equations"
pkg_url="https://bitbucket.org/fenics-project/dolfin/"
src_url="https://bitbucket.org/fenics-project/dolfin/downloads/dolfin-${pkg_version}.tar.gz"
src_dir="dolfin-${pkg_version}"
pkg_name_env_var=$(echo "${pkg_name}" | tr '[:lower:]' '[:upper:]' | tr -c '[:alnum:]\n' '_')

function build()
{
    . ../../../common/module.sh

    # Parse program options
    module_build_parse_command_line_args \
	"${0}" \
	"${pkg_name}" \
	"${pkg_version}" \
	"${pkg_moduledir}" \
	"${pkg_description}" \
	"${pkg_url}" \
	"$@"

    # Load build-time dependencies and determine prerequisite modules
    module_load_build_deps build_deps
    pkg_prereqs=$(module_prereqs prereqs)

    # Download and unpack source
    pkg_prefix=$(module_build_prefix "${prefix}" "${pkg_moduledir}")
    pkg_build_dir=$(module_build_create_build_dir "${pkg_name}" "${pkg_version}")
    pkg_src="${pkg_build_dir}/$(basename ${src_url})"
    module_build_download_package "${src_url}" "${pkg_src}"
    module_build_unpack "${pkg_src}" "${pkg_build_dir}"

    # Apply patches
    patch -d "${pkg_build_dir}/${src_dir}" -p1 <0001-SNESTEST-is-removed.patch
    patch -d "${pkg_build_dir}/${src_dir}" -p1 <0001-io-Fix-include-of-boost-endian.hpp.patch
    patch -d "${pkg_build_dir}/${src_dir}" -p1 <0002-Require-C-17.patch
    patch -d "${pkg_build_dir}/${src_dir}" -p1 <0003-dolfin-mesh-MeshFunction.h-Add-missing-algorithm-inc.patch
    patch -d "${pkg_build_dir}/${src_dir}" -p1 <0001-dolfin-la-Include-petscsys.h-instead-of-petscoptions.patch

    # Build
    pushd "${pkg_build_dir}/${src_dir}"
    mkdir -p build
    pushd build
    cmake .. \
	  -DCMAKE_POLICY_DEFAULT_CMP0074=NEW \
	  -DCMAKE_INSTALL_PREFIX="${pkg_prefix}" \
	  -DBUILD_SHARED_LIBS=TRUE \
	  -DEIGEN3_INCLUDE_DIR="${EIGEN_ROOT}/include/eigen3" \
	  -DPARMETIS_DIR="${PARMETIS_ROOT}" \
	  -DSCOTCH_DIR="${SCOTCH_ROOT}" \
	  -DAMD_DIR="${SUITESPARSE_ROOT}" \
	  -DCHOLMOD_DIR="${SUITESPARSE_ROOT}" \
	  -DUMFPACK_DIR="${SUITESPARSE_ROOT}"
    make -j"${JOBS}"
    make install
    popd
    popd

    # Write the module file
    pkg_modulefile=$(module_build_modulefile "${prefix}" "${modulefilesdir}" "${pkg_moduledir}")
    cat >"${pkg_modulefile}" <<EOF
#%Module
# ${pkg_name} ${pkg_version}

proc ModulesHelp { } {
     puts stderr "\tSets up the environment for ${pkg_name} ${pkg_version}\n"
}

module-whatis "${pkg_description}"
module-whatis "${pkg_url}"

${pkg_prereqs}

setenv ${pkg_name_env_var}_ROOT ${pkg_prefix}
setenv ${pkg_name_env_var}_INCDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_INCLUDEDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_LIBDIR ${pkg_prefix}/lib
setenv ${pkg_name_env_var}_LIBRARYDIR ${pkg_prefix}/lib
prepend-path PATH ${pkg_prefix}/bin
prepend-path C_INCLUDE_PATH ${pkg_prefix}/include
prepend-path CPLUS_INCLUDE_PATH ${pkg_prefix}/include
prepend-path LIBRARY_PATH ${pkg_prefix}/lib
prepend-path LD_LIBRARY_PATH ${pkg_prefix}/lib
prepend-path PKG_CONFIG_PATH ${pkg_prefix}/lib/pkgconfig
prepend-path CMAKE_MODULE_PATH ${pkg_prefix}/share/dolfin/cmake
set MSG "${pkg_name} ${pkg_version}"
EOF

    module_build_cleanup "${pkg_build_dir}"
}

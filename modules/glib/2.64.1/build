pkg_name=glib
pkg_version=2.64.1
pkg_moduledir="${pkg_name}/${pkg_version}"
pkg_description="Core object system used in GNOME"
pkg_url="https://developer.gnome.org/glib/"
src_url="https://ftp.gnome.org/pub/GNOME/sources/glib/2.64/glib-${pkg_version}.tar.xz"
src_dir="${pkg_name}-${pkg_version}"
pkg_name_env_var=$(echo "${pkg_name}" | tr '[:lower:]' '[:upper:]' | tr -c '[:alnum:]\n' '_')

function build()
{
    . ../../../../common/module.sh

    # Parse program options
    module_build_parse_command_line_args \
	"${0}" \
	"${pkg_name}" \
	"${pkg_version}" \
	"${pkg_moduledir}" \
	"${pkg_description}" \
	"${pkg_url}" \
	"$@"

    # Load build-time dependencies and determine prerequisite modules
    module_load_build_deps build_deps
    pkg_prereqs=$(module_prereqs prereqs)

    # Download and unpack source
    pkg_prefix=$(module_build_prefix "${prefix}" "${pkg_moduledir}")
    pkg_build_dir=$(module_build_create_build_dir "${pkg_name}" "${pkg_version}")
    pkg_src="${pkg_build_dir}/$(basename ${src_url})"
    module_build_download_package "${src_url}" "${pkg_src}"
    module_build_unpack "${pkg_src}" "${pkg_build_dir}" -x

    # Build
    pushd "${pkg_build_dir}/${src_dir}"
    mkdir -p build
    pushd build
    meson --prefix="${pkg_prefix}" \
	  --libdir="${pkg_prefix}/lib" \
	  -Dselinux=disabled \
	  -Dman=true \
	  ..
    ninja
    ninja install
    popd
    popd

    # Write the module file
    pkg_modulefile=$(module_build_modulefile "${prefix}" "${modulefilesdir}" "${pkg_moduledir}")
    cat >"${pkg_modulefile}" <<EOF
#%Module
# ${pkg_name} ${pkg_version}

proc ModulesHelp { } {
     puts stderr "\tSets up the environment for ${pkg_name} ${pkg_version}\n"
}

module-whatis "${pkg_description}"
module-whatis "${pkg_url}"

${pkg_prereqs}

setenv ${pkg_name_env_var}_ROOT ${pkg_prefix}
setenv ${pkg_name_env_var}_INCDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_INCLUDEDIR ${pkg_prefix}/include
setenv ${pkg_name_env_var}_LIBDIR ${pkg_prefix}/lib
setenv ${pkg_name_env_var}_LIBRARYDIR ${pkg_prefix}/lib
prepend-path PATH ${pkg_prefix}/bin
prepend-path C_INCLUDE_PATH ${pkg_prefix}/include
prepend-path CPLUS_INCLUDE_PATH ${pkg_prefix}/include
prepend-path LIBRARY_PATH ${pkg_prefix}/lib
prepend-path LD_LIBRARY_PATH ${pkg_prefix}/lib
prepend-path PKG_CONFIG_PATH ${pkg_prefix}/lib/pkgconfig
prepend-path MANPATH ${pkg_prefix}/share/man
prepend-path INFOPATH ${pkg_prefix}/share/info
set MSG "${pkg_name} ${pkg_version}"
EOF

    module_build_cleanup "${pkg_build_dir}"
}
